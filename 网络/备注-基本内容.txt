1.三次握手
A--SYN-->B
A<--ACK/SYN--B
A--ACK-->B
2.四次握手
A-fin=1的数据段-->B A发送数据,进入fin_wait的阶段
B-ack=1的报文-->A  B接受到数据,返回ack的信息到A
B-fin=1的信息-->A 当B接受到所有数据后，会返回一个fin=1的信息给A,并且进入close_wait的状态
A-ack=1的信息-->B A接受到fin=1的信息之后，返回一个ack=1的信息给b，表示关闭连接

3.arp协议
arp是ip-->mac地址的查询

4.urllib和urllib2的区别
1.urllib2可以post但是urllib不可以
2.urllib可以接受request类设置url请求的headers，但是urllib仅仅可以接受url，这意味这urllib不可以伪装user agent的字符串等等

5.post和get
1.post是将数据发送到客户端 get是客户端向服务器请求数据
2.post传递的值不会显示在url地址栏 get会
3.post和get在http协议上都是不安全的

6.cookie和session 
1.cookie是在客户端的，session是保存在服务器的
2.cookie不安全 session是安全的

7.apache和nginx的区别
apache：
rewrite比nginx强大
模块多
少bug，比nginx稳定
超稳定
nignx：
轻量级，比apache占用少的内存和资源
抗并发，nginx处理请求是异步非阻塞的支持更多并发链接，而apache是阻塞性的，在高并发下，nginx支持更多的并发请求而且消耗低
配置简洁
高度模块化的设计，编写简单
社区活跃

8.用户密码保存
1.明文保存
2.明文hash后保存，如md5
3.md5+salt（加盐）

9.http和https
100 服务器正在处理客户请求
200 请求成功
301 重定向
403 禁止的页面
404 页面未找到
500 服务器内部错误 
503 以后在试
https握手 是加密的

10.xsrf和xss
csrf 跨站请求伪造 伪造用户的信息发送恶意的请求来制造出恶意的行为
xss 跨站脚本攻击：这个都很清楚 就是我们提交脚本，可以被网页执行
csrf重点是请求 xss是脚本

11.网页请求一共有四种：get，post，put，delete
get、delete、put 都具有幂等性
post不具有
幂等性指的是 一次请求和多次请求都具有相同的结果

12.restful架构、SOAP和RPC：
restful是一种软件开发时期的原则或者说是约束
SOAP简化了客户端，节省格式化页面时间
rpc是一种不需要了解底层，就可以传输消息的服务，
进化的顺序：rpc>soap>restful

13.b/s和c/s
b/s架构：浏览器/服务器 现在使用的网页架构 使用www就可以访问
c/s架构：客户端/服务器的架构 是标准的软件开发架构

14.CGI和WSGI
CGI是通用网关接口，用户通过cgi来获取动态数据或者文件，可以使用任何语言编写
WSGU是python应用程序或框架之间的一种接口，目的是使用统一语言python编写前后端

15.中间人攻击：攻击者在中间进行伪造或者监听

16.c10k问题：同时又成千上万个用户链接到服务器
这里两种方法：
1.使用线程/进程来单独处理每个链接 服务器会崩溃
2.使用一个线程/进程处理每个链接 io多路复用
这里就产生了select/poll
select：管理每一个句柄的操作，当句柄发生改变，逐一查看是那个句柄，找到则分配资源，超时则调用返回，产生问题是链接数太大的时候，管理句柄的数量会太大，造成句柄上线
问题：句柄上限+重复初始化+逐个排查所有文件句柄

poll：传递需要关注的时间消除文件句柄上限，同时分别标注关注时间和发生时间，避免重复初始化
问题：逐个排查所有文件句柄的状态效率不高

epoll：返回的时候返回发生了状态改变的句柄就可以了啊
问题：只能存在linux上：

epoll具有高并发，高性能，异步非阻塞的技术
所以nginx，libevent，node.js都是epoll时代的产物
windows上使用的是iocp

但是在内核中处理数据会切换cpu的调度，在并发的同时是非常耗费资源和时间的，这里就有了"""协程"""这个很厉害的东西

协程是同步阻塞技术，在同一时间只会又一个程序被处理，但进程永远不会这样

以上技术都属于io多路复用，并且历史是：
epoll>poll>select

17.socket编程：
tcp：socket->bind->listen->accept->send->close 服务器
     socket->connect->send->close

18.浏览器缓存：
1.浏览器第一次请求，请求响应，缓存协商
2.缓存时间等等

1.浏览器再次请求的时候，查看是否有缓存，是否过期
2.没有的时候就会调用，有的时候就会重新发起请求

ctrl+f5 是会过滤缓存，重新向web服务器请求数据的

19.http1.0和http1.1：
8种方法：get，head，post，put，delete，connect，options，trace，patch

20.ajax：
以不重新加载页面的方式，交换网页并更新部分网页的技术

21.unix的进程间通信：
1.管道
2.信号
3.消息队列
4.共享内存
5.套接字